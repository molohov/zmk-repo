#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/* Layers */
#define DEF 0
#define SYM 1
#define NAV 2
#define OTH 3

/* Shortcuts */
#define PC_UNDO LC(Z)
#define PC_ALL LC(A)
#define PC_CUT LC(X)
#define PC_COPY LC(C)
#define PC_PASTE LC(V)
#define WIN_RUN LA(Q)

/* Key Position Groups */
 #define KEYS_LEFT 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
 #define KEYS_RIGHT 5 6 7 8 9 15 16 17 18 19 25 25 27 28 29
 #define KEYS_THUMBS 30 31 32 33 34 35

/* Behavior Settings */
&sk {
  quick-release;
};

/ {
    behaviors {
        mtl: mod_tap_left {
             compatible = "zmk,behavior-hold-tap";
             #binding-cells = <2>;
             flavor = "balanced";
             tapping-term-ms = <280>;
             quick-tap-ms = <175>;
             require-prior-idle-ms = <150>;
             bindings = <&kp>, <&kp>;
             hold-trigger-key-positions = <KEYS_RIGHT KEYS_THUMBS>;
             hold-trigger-on-release;
         };
         mtr: mod_tap_right {
             compatible = "zmk,behavior-hold-tap";
             #binding-cells = <2>;
             flavor = "balanced";
             tapping-term-ms = <280>;
             quick-tap-ms = <175>;
             require-prior-idle-ms = <150>;
             bindings = <&kp>, <&kp>;
             hold-trigger-key-positions = <KEYS_LEFT KEYS_THUMBS>;
             hold-trigger-on-release;
         };
    };

    macros {
        homedir_str: homedir_str {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&kp TILDE &kp FSLH>;
        };
    };

    combos {
        compatible = "zmk,combos";

        /*                KEY POSITIONS

             0   1   2   3   4      5   6   7   8   9
            10  11  12  13  14     15  16  17  18  19
            20  21  22  23  24     25  26  27  28  29
                    30  31  32     33  34  35            */

        /* LEFT HAND
           combos are defined from leftmost key to rightmost key */

        /* UPPER ROW */
        refresh { key-positions = <2 4>; bindings = <&kp K_REFRESH>; layers = <DEF>; };
        hash { key-positions = <2 13>; bindings = <&kp HASH>; layers = <DEF>; };
        
        /* MIDDLE ROW */
        screenshot { key-positions = <11 2>; bindings = <&kp PSCRN>; layers = <DEF>; };
        oneshot_lctl { key-positions = <11 12>; bindings = <&sk LCTRL>; layers = <DEF>; };
        lprn { key-positions = <11 13>; bindings = <&kp LPAR>; layers = <DEF>; };
        lcbr { key-positions = <11 3>; bindings = <&kp LBKT>; layers = <DEF>; };
        lbrc { key-positions = <11 23>; bindings = <&kp LBRC>; layers = <DEF>; };
        labk { key-positions = <11 14>; bindings = <&kp LT>; layers = <DEF>; };
        asterisk { key-positions = <12 13>; bindings = <&kp ASTRK>; layers = <DEF>; };
        j { key-positions = <10 13>; bindings = <&kp J>; layers = <DEF>; };
        z { key-positions = <10 23>; bindings = <&kp Z>; layers = <DEF>; };
        
        /* LOWER ROW */
        oneshot_lalt { key-positions = <21 22>; bindings = <&sk LALT>; layers = <DEF>; };
        
        /* RIGHT HAND
           combos are defined from rightmost key to leftmost key */

        /* UPPER ROW
           punctuation */
        equal { key-positions = <8 7>; bindings = <&kp EQUAL>; layers = <DEF>; };
        at { key-positions = <8 6>; bindings = <&kp AT>; layers = <DEF>; };
        homedir { key-positions = <8 5>; bindings = <&homedir_str>; layers = <DEF>; };
        plus { key-positions = <7 6>; bindings = <&kp PLUS>; layers = <DEF>; };
        dollar { key-positions = <7 16>; bindings = <&kp DLLR>; layers = <DEF>; };
        backtick { key-positions = <7 5>; bindings = <&kp GRAVE>; layers = <DEF>; };
        
        /* MIDDLE ROW
           vim combos rooted from right home row middle finger */
        oneshot_rctl { key-positions = <18 17>; bindings = <&sk LCTRL>; layers = <DEF>; };
        rprn { key-positions = <18 16>; bindings = <&kp RPAR>; layers = <DEF>; };
        rcbr { key-positions = <18 6>; bindings = <&kp RBKT>; layers = <DEF>; };
        rbrc { key-positions = <18 26>; bindings = <&kp RBRC>; layers = <DEF>; };
        rabk { key-positions = <18 15>; bindings = <&kp GT>; layers = <DEF>; };
        ampersand { key-positions = <16 15>; bindings = <&kp AMPS>; layers = <DEF>; };
        
        /* LOWER ROW */
        oneshot_ralt { key-positions = <28 27>; bindings = <&sk LALT>; layers = <DEF>; };
        
        /* THUMBS */
        underscore { key-positions = <34 33>; bindings = <&kp UNDER>; layers = <DEF>; };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                &kp X     &kp F     &kp M     &kp P     &kp B       &kp MINUS &kp DOT   &kp SLASH &kp COMMA &kp Q
                &kp R     &kp S     &kp N     &kp T     &kp G       &kp SQT   &kp A     &kp E     &kp I     &kp H
                &kp W     &kp C     &kp L     &kp D     &kp V       &kp SEMI  &kp U     &kp O     &kp Y     &kp K
                      &mt LGUI DEL &lt SYM BSPC &mt LSHFT RET       &mt LSHFT TAB &lt NAV SPACE &kp WIN_RUN
            >;
        };
        sym_layer {
            bindings = <
                &none     &none     &none     &none     &none       &none     &none     &none     &none     &none 
                &none     &none     &none     &none     &none       &none     &none     &none     &none     &none 
                &none     &none     &none     &none     &none       &none     &none     &none     &none     &none 
                                    &trans    &trans    &trans      &trans    &trans    &trans
            >;
        };
        nav_layer {
            bindings = <
                &none     &none     &none     &none     &none       &none     &none     &none     &none     &none 
                &none     &none     &none     &none     &none       &none     &none     &none     &none     &none 
                &none     &none     &none     &none     &none       &none     &none     &none     &none     &none 
                                    &trans    &trans    &trans      &trans    &trans    &trans
            >;
        };
        other_layer {
            bindings = <
                &none     &none     &none     &none     &none       &none     &none     &none     &none     &none 
                &none     &none     &none     &none     &none       &none     &none     &none     &none     &none 
                &none     &none     &none     &none     &none       &none     &none     &none     &none     &none 
                                    &trans    &trans    &trans      &trans    &trans    &trans
            >;
        };
    };
};
